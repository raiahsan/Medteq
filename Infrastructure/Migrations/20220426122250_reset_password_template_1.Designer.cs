// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220426122250_reset_password_template_1")]
    partial class reset_password_template_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.Activity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Trackable")
                        .HasColumnType("bit");

                    b.Property<int>("fk_ActivityTypeID")
                        .HasColumnType("int");

                    b.Property<int>("fk_PatientID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("fk_ActivityTypeID");

                    b.HasIndex("fk_PatientID");

                    b.ToTable("Activity", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ActivityDirection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("ActivityDirection", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ActivityEmail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("BCC")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Body")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CC")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Recipients")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .IsFixedLength();

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("fk_ActivityID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_ActivityID");

                    b.ToTable("ActivityEmail", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ActivityMessage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Reipient")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit");

                    b.Property<int>("fk_ActivityID")
                        .HasColumnType("int");

                    b.Property<int>("fk_DirectionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_ActivityID");

                    b.HasIndex("fk_DirectionID");

                    b.ToTable("ActivityMessage", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ActivityNote", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("fk_ActivityID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_ActivityID");

                    b.ToTable("ActivityNote", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ActivityPhoneCall", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<bool>("LeftVoiceMail")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("fk_ActivityID")
                        .HasColumnType("int");

                    b.Property<int>("fk_DirectionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_ActivityID");

                    b.HasIndex("fk_DirectionID");

                    b.ToTable("ActivityPhoneCall", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ActivityStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("ActivityStatus", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ActivityTask", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("Due")
                        .HasColumnType("datetime");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("fk_ActivityID")
                        .HasColumnType("int");

                    b.Property<int>("fk_StatusID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_ActivityID");

                    b.HasIndex("fk_StatusID");

                    b.ToTable("ActivityTask", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ActivityType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("ActivityType", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AddressType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("AddressType", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            TypeName = "Billing"
                        },
                        new
                        {
                            ID = 2,
                            Active = true,
                            TypeName = "Shipping"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ApiLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("IPAddress")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("RequestAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestByURL")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RequestURL")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResponseAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ResponseStatusCode")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ApiLog", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("BookingEndDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("BookingStartDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ExternalSystemAppointmentID")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(550)
                        .IsUnicode(false)
                        .HasColumnType("varchar(550)");

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<bool>("Rescheduled")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("fk_PatientID")
                        .HasColumnType("int");

                    b.Property<int>("fk_ProviderID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("fk_PatientID");

                    b.HasIndex("fk_ProviderID");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Branch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BranchName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BranchNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Fax")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NPI")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TaxID")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TaxonomyCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("fk_StateID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("fk_StateID");

                    b.ToTable("Branch", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ContactMethod", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.ToTable("ContactMethod", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            Name = "Primary"
                        },
                        new
                        {
                            ID = 2,
                            Active = true,
                            Name = "Secondary"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ContactType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("ContactType", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            Type = "Primary"
                        },
                        new
                        {
                            ID = 2,
                            Active = true,
                            Type = "Secondary"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Diagnosis", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Icdcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ICDCode");

                    b.Property<int>("fk_ICDCodeTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_ICDCodeTypeID");

                    b.ToTable("Diagnosis", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Body")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("ID");

                    b.ToTable("EmailTemplates", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            Body = "<!DOCTYPE html>  <html xmlns='http://www.w3.org/1999/xhtml'>  <head>      <link href='https://fonts.googleapis.com/css2?family=Roboto&display=swap'  rel='stylesheet' />      <style type='text/css'>            @font-face {              font-family: Roboto;              src: url('Roboto');               src: url('Roboto-webfont.eot?#iefix') format('embedded-opentype'), url('Roboto-webfont.woff')  format('woff'), url('Roboto-webfont.ttf') format('truetype'), url('Roboto-webfont.svg#Sri-TSCRegular') format('svg');     font-weight: normal;              font-style: normal;          }            body {              font-family: Roboto, serif;    font-size: 12px;              font-style: normal;              font-weight: 400;              padding: 0;      text-align: center;              background: #f6f6f6;          }            .bigscreen1 {              padding-bottom: 20px;    border-left: 40px solid #006aff;              border-right: 40px solid #006aff;          }            .bigscreen {     padding-bottom: 20px;              border-left: 40px solid #006aff;              border-right: 40px solid #006aff;      border-top: 30px solid #006aff;          }          .innertablewidth {              width: 60%;          }    @media only screen and (max-width: 600px) {              .bigscreen {                  padding-bottom: 20px;     border-left: 0;                  border-right: 0;                  border-top: 0;              }                .bigscreen1 {    padding-bottom: 20px;                  border-left: 0;                  border-right: 0;              }    .innertablewidth {                  width: 90%;              }          }      </style>      <meta http-equiv='Content-Type' content='text/html; charset=UTF-8' />      <meta name='viewport' content='width=device-width, initial-scale=1.0' />  </head>  <body>    <table border='0' cellpadding='0' cellspacing='0' width='100%'>            <tr>              <td style='padding-bottom: 30px; padding-top: 10px; background: #f6f6f6'>                   <table class='innertablewidth' align='center' border='0' cellpadding='0' cellspacing='0'>                 <tr>                            <td style='padding-top:10px; background-color: #006aff'></td>              </tr>                      <tr>                              <td align='center' bgcolor='#ffffff' class='bigscreen' style='padding-top:30px;'>      <P style='padding-top:5px; padding-left: 10px;padding-right: 10px;width: 100%;max-width: 255px;font-size: 25px;'>   <b>Medteq</b> </p>                           </td>                        </tr>                      <tr>       <td align='center' bgcolor='#ffffff' class='bigscreen1' style='color: #006aff; font-weight: bold; font-size: 24px;  line-height: 29px; padding-top: 15px;'>                                Hi [First Name]                           </td>                      </tr>                      <tr>                            <td bgcolor='#ffffff' style='padding-bottom: 30px; padding-right: 40px; padding-left: 40px;'>   <table border='0' cellpadding='0' cellspacing='0' width='100%'>                                  <tr>      <td style='padding-top:20px; font-size: 16px; line-height: 23px; color: #000000; text-align:left;'>          We’ve received a request to reset your password, if you did not submit this request please ignore this email.   Click on the link below to reset your password..<br/> <b><a href='[URL]'</a>Click Here</b>      </td>                                  </tr>                                    <tr>       <td style='padding-top:20px; color: #000; font-weight: 500; font-size: 16px;line-height:19px; text-align:left;'>   </td>                                  </tr>                                   <tr>                 <td align='center' style='padding-top:30px; font-weight: 400; letter-spacing: 0px; font-size: 32px; line-height: 38px;  color: #006aff;'>                                            Have a great day,                                      </td>     </tr>                                  <tr>                                         <td align='center' style='padding-bottom:15px; font-weight: 900; letter-spacing: 0px; font-size: 32px; line-height: 38px; color: #006aff;'>                                            The Medteq                                      </td>                                  </tr>                              </table>                          </td>                      </tr>                  </table>              </td>            </tr>      </table>  </body></html>",
                            Description = "Reset Password Email",
                            Name = "Reset_Password_Email",
                            Subject = "Reset Password Email"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Entity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Entity", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ExceptionLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JSON")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestJSON")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestUrl")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ID");

                    b.ToTable("ExceptionLog", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.File", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("FileSize")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fileSize");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fileType");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("fileURL");

                    b.Property<int>("RecordID")
                        .HasColumnType("int");

                    b.Property<int>("UploadedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("fk_EntityID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UploadedBy");

                    b.HasIndex("fk_EntityID");

                    b.ToTable("File", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Gender", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.ToTable("Gender", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            Value = "Male"
                        },
                        new
                        {
                            ID = 2,
                            Active = true,
                            Value = "Female"
                        },
                        new
                        {
                            ID = 3,
                            Active = true,
                            Value = "Other"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ICDCodeType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("ICDCodeType", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            TypeName = "ICD-9"
                        },
                        new
                        {
                            ID = 2,
                            Active = true,
                            TypeName = "ICD-10"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Lead", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("BillingAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BillingAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BillingAddress3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BillingCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BillingPostalCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateLastSeenByDoctor")
                        .HasColumnType("date");

                    b.Property<int?>("DiagnosisCode")
                        .HasColumnType("int");

                    b.Property<string>("DoctorFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DoctorLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DoctorNPI")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("LeadGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LeadRawData")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<int?>("fk_BillingStateID")
                        .HasColumnType("int");

                    b.Property<int>("fk_BranchID")
                        .HasColumnType("int");

                    b.Property<int?>("fk_GenderID")
                        .HasColumnType("int");

                    b.Property<int>("fk_LeadSourceID")
                        .HasColumnType("int");

                    b.Property<int>("fk_LeadTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("fk_PatientID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_BillingStateID");

                    b.HasIndex("fk_BranchID");

                    b.HasIndex("fk_GenderID");

                    b.HasIndex("fk_LeadSourceID");

                    b.HasIndex("fk_LeadTypeID");

                    b.HasIndex("fk_PatientID");

                    b.ToTable("Lead", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.LeadContact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<int>("fk_ContactMethodID")
                        .HasColumnType("int");

                    b.Property<int>("fk_LeadID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_ContactMethodID");

                    b.HasIndex("fk_LeadID");

                    b.ToTable("LeadContact", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.LeadSource", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.ToTable("LeadSource", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            Name = "Salesforce"
                        },
                        new
                        {
                            ID = 2,
                            Active = true,
                            Name = "Call"
                        });
                });

            modelBuilder.Entity("Domain.Entities.LeadType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.ToTable("LeadType", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            Name = "Primary"
                        },
                        new
                        {
                            ID = 2,
                            Active = true,
                            Name = "Secondary"
                        });
                });

            modelBuilder.Entity("Domain.Entities.MaritalStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.ToTable("MaritalStatus", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            Value = "Married"
                        },
                        new
                        {
                            ID = 2,
                            Active = true,
                            Value = "Single"
                        },
                        new
                        {
                            ID = 3,
                            Active = true,
                            Value = "Divorced"
                        },
                        new
                        {
                            ID = 4,
                            Active = true,
                            Value = "Widowed"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DOD")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateOfAdmission")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateOfDischarge")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateOfOnset")
                        .HasColumnType("date");

                    b.Property<int?>("DiscountPct")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EmailVerifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Height")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("HippasignatureOnFile")
                        .HasColumnType("bit")
                        .HasColumnName("HIPPASignatureOnFile");

                    b.Property<bool?>("HoldAcct")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("MobileVerifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("PatientGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SSN")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .IsFixedLength();

                    b.Property<string>("StateOfAutoAccident")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Weight")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("fk_BranchID")
                        .HasColumnType("int");

                    b.Property<int?>("fk_GenderID")
                        .HasColumnType("int");

                    b.Property<int?>("fk_LinkedPatientID")
                        .HasColumnType("int");

                    b.Property<int?>("fk_MaritalStatusID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("fk_BranchID");

                    b.HasIndex("fk_GenderID");

                    b.HasIndex("fk_LinkedPatientID");

                    b.HasIndex("fk_MaritalStatusID");

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PatientAddress", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("fk_AddressTypeID")
                        .HasColumnType("int");

                    b.Property<int>("fk_PatientID")
                        .HasColumnType("int");

                    b.Property<int>("fk_StateID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_AddressTypeID");

                    b.HasIndex("fk_PatientID");

                    b.HasIndex("fk_StateID");

                    b.ToTable("PatientAddress", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PatientContact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("fk_ContactTypeID")
                        .HasColumnType("int");

                    b.Property<int>("fk_PatientID")
                        .HasColumnType("int");

                    b.Property<int>("fk_RelationshipTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("fk_StateID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("fk_ContactTypeID");

                    b.HasIndex("fk_PatientID");

                    b.HasIndex("fk_RelationshipTypeID");

                    b.HasIndex("fk_StateID");

                    b.ToTable("PatientContact", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PatientDiagnosis", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sequence")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("fk_DiagnosisID")
                        .HasColumnType("int");

                    b.Property<int>("fk_PatientID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("fk_DiagnosisID");

                    b.HasIndex("fk_PatientID");

                    b.ToTable("PatientDiagnosis", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PatientPayor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Bin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Deductible")
                        .HasColumnType("decimal(18,0)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("GroupName")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("GroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("InsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("InsVerifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("InsVerifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InsuredAddress1")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("InsuredAddress2")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("InsuredCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InsuredFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InsuredLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InsuredPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InsuredZip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NCDPDPolicyNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NCPDPGroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("PatientPayorGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PayPercent")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("PayorContact")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Pcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("PolicyEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PolicyHolderDOB")
                        .HasColumnType("date");

                    b.Property<string>("PolicyHolderName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PolicyNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("PolicyStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RawData")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("VerificationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("fk_InsuredStateID")
                        .HasColumnType("int");

                    b.Property<int>("fk_PatientID")
                        .HasColumnType("int");

                    b.Property<int>("fk_PayorID")
                        .HasColumnType("int");

                    b.Property<int>("fk_PayorLevelID")
                        .HasColumnType("int");

                    b.Property<int?>("fk_PolicyHolderGenderID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_InsuredStateID");

                    b.HasIndex("fk_PatientID");

                    b.HasIndex("fk_PayorID");

                    b.HasIndex("fk_PayorLevelID");

                    b.HasIndex("fk_PolicyHolderGenderID");

                    b.ToTable("PatientPayor", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PatientPayorEligibility", b =>
                {
                    b.Property<int>("EligibilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EligibilityID"), 1L, 1);

                    b.Property<string>("BatchName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DateOfServiceFrom")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DateOfServiceTo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DependentFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DependentLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DependentRelationship")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("EligibilityGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EligibilityRequestData")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("EligiblityRawResponse")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("Fk_PatientPayorID")
                        .HasColumnType("int");

                    b.Property<string>("IssueDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Manual")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("PatientDOB")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientGender")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderNPI")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderPIN")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderTaxanomy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ServiceCodes")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SubcriberFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SubcriberLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SubcriberMemberID")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SubcriberSSN")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SubscriberGroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VerificationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("fk_PatientID")
                        .HasColumnType("int");

                    b.HasKey("EligibilityID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Fk_PatientPayorID");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("fk_PatientID");

                    b.ToTable("PatientPayorEligibility", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PatientPayorEligibilityDetail", b =>
                {
                    b.Property<int>("EligibilityDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EligibilityDetailID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("EligibilityBegin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("GroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MemberID")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("OtherInfo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PlanBegin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PlanNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PlanText")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PlanType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RawJsonData")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Relationship")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReportText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("fk_PatientPayorEligiblityID")
                        .HasColumnType("int");

                    b.Property<int?>("fk_StateID")
                        .HasColumnType("int");

                    b.HasKey("EligibilityDetailID");

                    b.HasIndex("fk_PatientPayorEligiblityID");

                    b.HasIndex("fk_StateID");

                    b.ToTable("PatientPayorEligibilityDetail", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PatientProvider", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("fk_PatientID")
                        .HasColumnType("int");

                    b.Property<int>("fk_ProviderID")
                        .HasColumnType("int");

                    b.Property<int>("fk_ProviderTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_PatientID");

                    b.HasIndex("fk_ProviderID");

                    b.HasIndex("fk_ProviderTypeID");

                    b.ToTable("PatientProvider", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Payor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool?>("AccountOnHold")
                        .HasColumnType("bit");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Bin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClaimPercentage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactMiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("GroupName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("GroupNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsEDIPayer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupportingClaims")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupportingEligibility")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte?>("PayPercentage")
                        .HasColumnType("tinyint");

                    b.Property<string>("PayorCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("PayorGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PayorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Pcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PlanType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("PriceTable")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RawData")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("SiteUrl")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("Submission")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TaxType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Payor", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PayorLevel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("PayorLevel", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            Name = "Primary"
                        },
                        new
                        {
                            ID = 2,
                            Active = true,
                            Name = "Secondary"
                        },
                        new
                        {
                            ID = 3,
                            Active = true,
                            Name = "Tertiary"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Provider", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address1")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CommercialNumber")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeaexpiryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("DEAExpiryDate");

                    b.Property<string>("Deanumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("DEANumber");

                    b.Property<string>("DegreeDescription")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("DoctorGroup")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IMSRxerID")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LicenseExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Location")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<int?>("MarketDecile")
                        .HasColumnType("int");

                    b.Property<string>("MedicalID")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NPINumber")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<Guid>("ProviderHubID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Specialty")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("StateMedicaidID")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("TaxonomyCode")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Upin")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("UPIN")
                        .IsFixedLength();

                    b.Property<int?>("fk_ParentProviderID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_ParentProviderID");

                    b.ToTable("Provider", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProviderAvailability", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("FromTime")
                        .HasColumnType("time");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("time");

                    b.Property<int>("fk_ProviderID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("fk_ProviderID");

                    b.ToTable("ProviderAvailability", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProviderType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("ProviderType", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            Type = "Primary"
                        },
                        new
                        {
                            ID = 2,
                            Active = true,
                            Type = "Ordering"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProviderUnavailability", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FromDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ToDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("fk_ProviderID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_ProviderID");

                    b.ToTable("ProviderUnavailability", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RelationshipType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("RelationshipType", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            Type = "Father"
                        },
                        new
                        {
                            ID = 2,
                            Active = true,
                            Type = "Mother"
                        },
                        new
                        {
                            ID = 3,
                            Active = true,
                            Type = "Brother"
                        },
                        new
                        {
                            ID = 4,
                            Active = true,
                            Type = "Sister"
                        },
                        new
                        {
                            ID = 5,
                            Active = true,
                            Type = "Wife"
                        },
                        new
                        {
                            ID = 6,
                            Active = true,
                            Type = "Husband"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("State", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            Code = "AL",
                            Name = "Alabama"
                        },
                        new
                        {
                            ID = 2,
                            Active = true,
                            Code = "AK",
                            Name = "Alaska"
                        },
                        new
                        {
                            ID = 3,
                            Active = true,
                            Code = "AZ",
                            Name = "Arizona"
                        },
                        new
                        {
                            ID = 4,
                            Active = true,
                            Code = "AR",
                            Name = "Arkansas"
                        },
                        new
                        {
                            ID = 5,
                            Active = true,
                            Code = "CA",
                            Name = "California"
                        },
                        new
                        {
                            ID = 6,
                            Active = true,
                            Code = "CO",
                            Name = "Colorado"
                        },
                        new
                        {
                            ID = 7,
                            Active = true,
                            Code = "CT",
                            Name = "Connecticut"
                        },
                        new
                        {
                            ID = 8,
                            Active = true,
                            Code = "DE",
                            Name = "Delaware"
                        },
                        new
                        {
                            ID = 9,
                            Active = true,
                            Code = "FL",
                            Name = "Florida"
                        },
                        new
                        {
                            ID = 10,
                            Active = true,
                            Code = "GA",
                            Name = "Georgia"
                        },
                        new
                        {
                            ID = 11,
                            Active = true,
                            Code = "HI",
                            Name = "Hawaii"
                        },
                        new
                        {
                            ID = 12,
                            Active = true,
                            Code = "ID",
                            Name = "Idaho"
                        },
                        new
                        {
                            ID = 13,
                            Active = true,
                            Code = "IL",
                            Name = "Illinois"
                        },
                        new
                        {
                            ID = 14,
                            Active = true,
                            Code = "IN",
                            Name = "Indiana"
                        },
                        new
                        {
                            ID = 15,
                            Active = true,
                            Code = "IA",
                            Name = "Iowa"
                        },
                        new
                        {
                            ID = 16,
                            Active = true,
                            Code = "KS",
                            Name = "Kansas"
                        },
                        new
                        {
                            ID = 17,
                            Active = true,
                            Code = "KY",
                            Name = "Kentucky"
                        },
                        new
                        {
                            ID = 18,
                            Active = true,
                            Code = "LA",
                            Name = "Louisiana"
                        },
                        new
                        {
                            ID = 19,
                            Active = true,
                            Code = "ME",
                            Name = "Maine"
                        },
                        new
                        {
                            ID = 20,
                            Active = true,
                            Code = "MD",
                            Name = "Maryland"
                        },
                        new
                        {
                            ID = 21,
                            Active = true,
                            Code = "MA",
                            Name = "Massachusetts"
                        },
                        new
                        {
                            ID = 22,
                            Active = true,
                            Code = "MI",
                            Name = "Michigan"
                        },
                        new
                        {
                            ID = 23,
                            Active = true,
                            Code = "MN",
                            Name = "Minnesota"
                        },
                        new
                        {
                            ID = 24,
                            Active = true,
                            Code = "MS",
                            Name = "Mississippi"
                        },
                        new
                        {
                            ID = 25,
                            Active = true,
                            Code = "MO",
                            Name = "Missouri"
                        },
                        new
                        {
                            ID = 26,
                            Active = true,
                            Code = "MT",
                            Name = "Montana"
                        },
                        new
                        {
                            ID = 27,
                            Active = true,
                            Code = "NE",
                            Name = "Nebraska"
                        },
                        new
                        {
                            ID = 28,
                            Active = true,
                            Code = "NV",
                            Name = "Nevada"
                        },
                        new
                        {
                            ID = 29,
                            Active = true,
                            Code = "NH",
                            Name = "New Hampshire"
                        },
                        new
                        {
                            ID = 30,
                            Active = true,
                            Code = "NJ",
                            Name = "New Jersey"
                        },
                        new
                        {
                            ID = 31,
                            Active = true,
                            Code = "NM",
                            Name = "New Mexico"
                        },
                        new
                        {
                            ID = 32,
                            Active = true,
                            Code = "NY",
                            Name = "New York"
                        },
                        new
                        {
                            ID = 33,
                            Active = true,
                            Code = "NC",
                            Name = "North Carolina"
                        },
                        new
                        {
                            ID = 34,
                            Active = true,
                            Code = "ND",
                            Name = "North Dakota"
                        },
                        new
                        {
                            ID = 35,
                            Active = true,
                            Code = "OH",
                            Name = "Ohio"
                        },
                        new
                        {
                            ID = 36,
                            Active = true,
                            Code = "OK",
                            Name = "Oklahoma"
                        },
                        new
                        {
                            ID = 37,
                            Active = true,
                            Code = "OR",
                            Name = "Oregon"
                        },
                        new
                        {
                            ID = 38,
                            Active = true,
                            Code = "PA",
                            Name = "Pennsylvania["
                        },
                        new
                        {
                            ID = 39,
                            Active = true,
                            Code = "RI",
                            Name = "Rhode Island"
                        },
                        new
                        {
                            ID = 40,
                            Active = true,
                            Code = "SC",
                            Name = "South Carolina"
                        },
                        new
                        {
                            ID = 41,
                            Active = true,
                            Code = "SD",
                            Name = "South Dakota"
                        },
                        new
                        {
                            ID = 42,
                            Active = true,
                            Code = "TN",
                            Name = "Tennessee"
                        },
                        new
                        {
                            ID = 43,
                            Active = true,
                            Code = "TX",
                            Name = "Texas"
                        },
                        new
                        {
                            ID = 44,
                            Active = true,
                            Code = "UT",
                            Name = "Utah"
                        },
                        new
                        {
                            ID = 45,
                            Active = true,
                            Code = "VT",
                            Name = "Vermont"
                        },
                        new
                        {
                            ID = 46,
                            Active = true,
                            Code = "VA",
                            Name = "Virginia"
                        },
                        new
                        {
                            ID = 47,
                            Active = true,
                            Code = "WA",
                            Name = "Washington"
                        },
                        new
                        {
                            ID = 48,
                            Active = true,
                            Code = "WV",
                            Name = "West Virginia"
                        },
                        new
                        {
                            ID = 49,
                            Active = true,
                            Code = "WI",
                            Name = "Wisconsin"
                        },
                        new
                        {
                            ID = 50,
                            Active = true,
                            Code = "WY",
                            Name = "Wyoming"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SystemSetting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SettingCategory")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SettingName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("ID");

                    b.ToTable("SystemSettings", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            Label = "From Mail",
                            SettingCategory = "EmailSetting",
                            SettingKey = "NotificationFromMailAddress",
                            SettingName = "FromMail",
                            SettingValue = "medteqreporteq@gmail.com"
                        },
                        new
                        {
                            ID = 2,
                            Active = true,
                            Label = "Smtp Client",
                            SettingCategory = "EmailSetting",
                            SettingKey = "SMTPClient",
                            SettingName = "SmtpClient",
                            SettingValue = "smtp.gmail.com"
                        },
                        new
                        {
                            ID = 3,
                            Active = true,
                            Label = "Smtp Port",
                            SettingCategory = "EmailSetting",
                            SettingKey = "Smtp Port",
                            SettingName = "SmtpPort",
                            SettingValue = "587"
                        },
                        new
                        {
                            ID = 4,
                            Active = true,
                            Label = "Smtp User",
                            SettingCategory = "EmailSetting",
                            SettingKey = "Smtp User Name",
                            SettingName = "SmtpUser",
                            SettingValue = "medteqreporteq@gmail.com"
                        },
                        new
                        {
                            ID = 5,
                            Active = true,
                            Label = "Smtp Password",
                            SettingCategory = "EmailSetting",
                            SettingKey = "Smtp Password",
                            SettingName = "SmtpPassword",
                            SettingValue = "medteqreporteq@1"
                        },
                        new
                        {
                            ID = 6,
                            Active = true,
                            Label = "URL Expiry Time",
                            SettingCategory = "GeneralSetting",
                            SettingKey = "Expiry Time",
                            SettingName = "URLExpiryTime",
                            SettingValue = "32"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime?>("PasswordRequestDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordRequestHash")
                        .HasMaxLength(1500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1500)");

                    b.Property<int>("fk_BranchID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserToRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("fk_RoleID")
                        .HasColumnType("int");

                    b.Property<int>("fk_UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_RoleID");

                    b.HasIndex("fk_UserID");

                    b.ToTable("UserToRole", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserWorkflowStep", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("fk_UserID")
                        .HasColumnType("int");

                    b.Property<int>("fk_WorkflowStepID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_UserID");

                    b.HasIndex("fk_WorkflowStepID");

                    b.ToTable("UserWorkflowStep", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Workflow", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("WorkflowDescription")
                        .HasMaxLength(1500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1500)");

                    b.Property<string>("WorkflowName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Workflow", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.WorkflowRecord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EnterStepTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnterStepUserID")
                        .HasColumnType("int");

                    b.Property<int>("ReturnToStepID")
                        .HasColumnType("int");

                    b.Property<int>("fk_LeadID")
                        .HasColumnType("int");

                    b.Property<int?>("fk_PatientID")
                        .HasColumnType("int");

                    b.Property<int>("fk_WorkflowID")
                        .HasColumnType("int");

                    b.Property<int>("fk_WorkflowStepID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EnterStepUserID");

                    b.HasIndex("fk_LeadID");

                    b.HasIndex("fk_PatientID");

                    b.HasIndex("fk_WorkflowID");

                    b.HasIndex("fk_WorkflowStepID");

                    b.ToTable("WorkflowRecord", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.WorkflowRecordNote", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("fk_UserID")
                        .HasColumnType("int");

                    b.Property<int>("fk_WorkflowRecordID")
                        .HasColumnType("int");

                    b.Property<int>("fk_WorkflowStepID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_UserID");

                    b.HasIndex("fk_WorkflowRecordID");

                    b.HasIndex("fk_WorkflowStepID");

                    b.ToTable("WorkflowRecordNote", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.WorkflowRecordStateHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("EnterStateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnteredStateByUserId")
                        .HasColumnType("int")
                        .HasColumnName("EnteredStateByUserID");

                    b.Property<int>("fk_WorkflowRecordID")
                        .HasColumnType("int");

                    b.Property<int>("fk_WorkflowStateID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EnteredStateByUserId");

                    b.HasIndex("fk_WorkflowRecordID");

                    b.HasIndex("fk_WorkflowStateID");

                    b.ToTable("WorkflowRecordStateHistory", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.WorkflowRecordUserLock", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("fk_UserID")
                        .HasColumnType("int");

                    b.Property<int>("fk_WorkflowRecordID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_UserID");

                    b.HasIndex("fk_WorkflowRecordID");

                    b.ToTable("WorkflowRecordUserLock", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.WorkflowState", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<string>("WorkflowStateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("WorkflowState", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.WorkflowStep", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("DashboardSequence")
                        .HasColumnType("int");

                    b.Property<bool>("FinalStep")
                        .HasColumnType("bit");

                    b.Property<string>("LabelAlias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RegressToStepID")
                        .HasColumnType("int");

                    b.Property<int>("WorkflowSequence")
                        .HasColumnType("int");

                    b.Property<int>("fk_WorkflowID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegressToStepID");

                    b.HasIndex("fk_WorkflowID");

                    b.ToTable("WorkflowStep", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.WorkflowStepHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EnterStepTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnterStepUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExitStepTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ExitStepUserID")
                        .HasColumnType("int");

                    b.Property<string>("StepNotes")
                        .HasMaxLength(1500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1500)");

                    b.Property<int>("fk_WorkflowRecordID")
                        .HasColumnType("int");

                    b.Property<int>("fk_WorkflowStepID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EnterStepUserID");

                    b.HasIndex("ExitStepUserID");

                    b.HasIndex("fk_WorkflowRecordID");

                    b.HasIndex("fk_WorkflowStepID");

                    b.ToTable("WorkflowStepHistory", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Activity", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany("ActivitiesCreatedByUser")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Activity_User");

                    b.HasOne("Domain.Entities.User", "ModifiedByUser")
                        .WithMany("ActivitiesModifiedByUser")
                        .HasForeignKey("ModifiedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Activity_User1");

                    b.HasOne("Domain.Entities.ActivityType", "ActivityType")
                        .WithMany("Activities")
                        .HasForeignKey("fk_ActivityTypeID")
                        .IsRequired()
                        .HasConstraintName("FK_Activity_ActivityType");

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("Activities")
                        .HasForeignKey("fk_PatientID")
                        .IsRequired()
                        .HasConstraintName("FK_Activity_Patient");

                    b.Navigation("ActivityType");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.ActivityEmail", b =>
                {
                    b.HasOne("Domain.Entities.Activity", "Activity")
                        .WithMany("ActivityEmails")
                        .HasForeignKey("fk_ActivityID")
                        .IsRequired()
                        .HasConstraintName("FK_Email_Activity");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Domain.Entities.ActivityMessage", b =>
                {
                    b.HasOne("Domain.Entities.Activity", "Activity")
                        .WithMany("ActivityMessages")
                        .HasForeignKey("fk_ActivityID")
                        .IsRequired()
                        .HasConstraintName("FK_Message_Activity");

                    b.HasOne("Domain.Entities.ActivityDirection", "Direction")
                        .WithMany("ActivityMessages")
                        .HasForeignKey("fk_DirectionID")
                        .IsRequired()
                        .HasConstraintName("FK_Message_ActivityDirection");

                    b.Navigation("Activity");

                    b.Navigation("Direction");
                });

            modelBuilder.Entity("Domain.Entities.ActivityNote", b =>
                {
                    b.HasOne("Domain.Entities.Activity", "Activity")
                        .WithMany("ActivityNotes")
                        .HasForeignKey("fk_ActivityID")
                        .IsRequired()
                        .HasConstraintName("FK_Note_Activity");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Domain.Entities.ActivityPhoneCall", b =>
                {
                    b.HasOne("Domain.Entities.Activity", "Activity")
                        .WithMany("ActivityPhoneCalls")
                        .HasForeignKey("fk_ActivityID")
                        .IsRequired()
                        .HasConstraintName("FK_PhoneCall_Activity");

                    b.HasOne("Domain.Entities.ActivityDirection", "Direction")
                        .WithMany("ActivityPhoneCalls")
                        .HasForeignKey("fk_DirectionID")
                        .IsRequired()
                        .HasConstraintName("FK_PhoneCall_ActivityDirection");

                    b.Navigation("Activity");

                    b.Navigation("Direction");
                });

            modelBuilder.Entity("Domain.Entities.ActivityTask", b =>
                {
                    b.HasOne("Domain.Entities.Activity", "Activity")
                        .WithMany("ActivityTasks")
                        .HasForeignKey("fk_ActivityID")
                        .IsRequired()
                        .HasConstraintName("FK_Task_Activity");

                    b.HasOne("Domain.Entities.ActivityStatus", "Status")
                        .WithMany("ActivityTasks")
                        .HasForeignKey("fk_StatusID")
                        .IsRequired()
                        .HasConstraintName("FK_Task_ActivityStatus");

                    b.Navigation("Activity");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany("AppointmentsCreatedByUser")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_User");

                    b.HasOne("Domain.Entities.User", "ModifiedByUser")
                        .WithMany("AppointmentsModifiedByUser")
                        .HasForeignKey("ModifiedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_User1");

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("fk_PatientID")
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_Patient");

                    b.HasOne("Domain.Entities.Provider", "Provider")
                        .WithMany("Appointments")
                        .HasForeignKey("fk_ProviderID")
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_Provider");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Patient");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Domain.Entities.Branch", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany("BranchesCreatedByUser")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Branch_User");

                    b.HasOne("Domain.Entities.User", "ModifiedByUser")
                        .WithMany("BranchesModifiedByUser")
                        .HasForeignKey("ModifiedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Branch_User1");

                    b.HasOne("Domain.Entities.State", "State")
                        .WithMany("Branches")
                        .HasForeignKey("fk_StateID")
                        .HasConstraintName("FK_Branch_State");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Domain.Entities.Diagnosis", b =>
                {
                    b.HasOne("Domain.Entities.ICDCodeType", "ICDCodeType")
                        .WithMany("Diagnoses")
                        .HasForeignKey("fk_ICDCodeTypeID")
                        .IsRequired()
                        .HasConstraintName("FK_Diagnosis_ICDCodeType");

                    b.Navigation("ICDCodeType");
                });

            modelBuilder.Entity("Domain.Entities.File", b =>
                {
                    b.HasOne("Domain.Entities.User", "UploadedByUser")
                        .WithMany("Files")
                        .HasForeignKey("UploadedBy")
                        .IsRequired()
                        .HasConstraintName("FK_File_User");

                    b.HasOne("Domain.Entities.Entity", "Entity")
                        .WithMany("Files")
                        .HasForeignKey("fk_EntityID")
                        .IsRequired()
                        .HasConstraintName("FK_File_Entity");

                    b.Navigation("Entity");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("Domain.Entities.Lead", b =>
                {
                    b.HasOne("Domain.Entities.State", "BillingState")
                        .WithMany("Leads")
                        .HasForeignKey("fk_BillingStateID")
                        .HasConstraintName("FK_Lead_BillingState");

                    b.HasOne("Domain.Entities.Branch", "Branch")
                        .WithMany("Leads")
                        .HasForeignKey("fk_BranchID")
                        .IsRequired()
                        .HasConstraintName("FK_Lead_Branch");

                    b.HasOne("Domain.Entities.Gender", "Gender")
                        .WithMany("Leads")
                        .HasForeignKey("fk_GenderID")
                        .HasConstraintName("FK_Lead_Gender");

                    b.HasOne("Domain.Entities.LeadSource", "LeadSource")
                        .WithMany("Leads")
                        .HasForeignKey("fk_LeadSourceID")
                        .IsRequired()
                        .HasConstraintName("FK_Lead_LeadSource");

                    b.HasOne("Domain.Entities.LeadType", "LeadType")
                        .WithMany("Leads")
                        .HasForeignKey("fk_LeadTypeID")
                        .IsRequired()
                        .HasConstraintName("FK_Lead_LeadType");

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("Leads")
                        .HasForeignKey("fk_PatientID")
                        .HasConstraintName("FK_Lead_Patient");

                    b.Navigation("BillingState");

                    b.Navigation("Branch");

                    b.Navigation("Gender");

                    b.Navigation("LeadSource");

                    b.Navigation("LeadType");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.LeadContact", b =>
                {
                    b.HasOne("Domain.Entities.ContactMethod", "ContactMethod")
                        .WithMany("LeadContacts")
                        .HasForeignKey("fk_ContactMethodID")
                        .IsRequired()
                        .HasConstraintName("FK_LeadContact_ContactMethod");

                    b.HasOne("Domain.Entities.Lead", "Lead")
                        .WithMany("LeadContacts")
                        .HasForeignKey("fk_LeadID")
                        .IsRequired()
                        .HasConstraintName("FK_LeadContact_Lead");

                    b.Navigation("ContactMethod");

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany("PatientsCreatedByUser")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Patient_User");

                    b.HasOne("Domain.Entities.User", "ModifiedByUser")
                        .WithMany("PatientsModifiedByUser")
                        .HasForeignKey("ModifiedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Patient_User1");

                    b.HasOne("Domain.Entities.Branch", "Branch")
                        .WithMany("Patients")
                        .HasForeignKey("fk_BranchID")
                        .HasConstraintName("FK_Patient_Branch");

                    b.HasOne("Domain.Entities.Gender", "Gender")
                        .WithMany("Patients")
                        .HasForeignKey("fk_GenderID")
                        .HasConstraintName("FK_Patient_Gender");

                    b.HasOne("Domain.Entities.Patient", "LinkedPatient")
                        .WithMany("LinkedPatients")
                        .HasForeignKey("fk_LinkedPatientID")
                        .HasConstraintName("FK_Patient_Patient");

                    b.HasOne("Domain.Entities.MaritalStatus", "MaritalStatus")
                        .WithMany("Patients")
                        .HasForeignKey("fk_MaritalStatusID")
                        .HasConstraintName("FK_Patient_MaritalStatus");

                    b.Navigation("Branch");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Gender");

                    b.Navigation("LinkedPatient");

                    b.Navigation("MaritalStatus");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("Domain.Entities.PatientAddress", b =>
                {
                    b.HasOne("Domain.Entities.AddressType", "AddressType")
                        .WithMany("PatientAddresses")
                        .HasForeignKey("fk_AddressTypeID")
                        .IsRequired()
                        .HasConstraintName("FK_PatientAddress_AddressType");

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("PatientAddresses")
                        .HasForeignKey("fk_PatientID")
                        .IsRequired()
                        .HasConstraintName("FK_PatientAddress_Patient");

                    b.HasOne("Domain.Entities.State", "State")
                        .WithMany("PatientAddresses")
                        .HasForeignKey("fk_StateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PatientAddress_State");

                    b.Navigation("AddressType");

                    b.Navigation("Patient");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Domain.Entities.PatientContact", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany("PatientContactsCreatedByUser")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_PatientContact_User");

                    b.HasOne("Domain.Entities.User", "ModifiedByUser")
                        .WithMany("PatientContactsModifiedByUser")
                        .HasForeignKey("ModifiedBy")
                        .IsRequired()
                        .HasConstraintName("FK_PatientContact_User1");

                    b.HasOne("Domain.Entities.ContactType", "ContactType")
                        .WithMany("PatientContacts")
                        .HasForeignKey("fk_ContactTypeID")
                        .IsRequired()
                        .HasConstraintName("FK_PatientContact_ContactType");

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("PatientContacts")
                        .HasForeignKey("fk_PatientID")
                        .IsRequired()
                        .HasConstraintName("FK_PatientContact_Patient");

                    b.HasOne("Domain.Entities.RelationshipType", "RelationshipType")
                        .WithMany("PatientContacts")
                        .HasForeignKey("fk_RelationshipTypeID")
                        .IsRequired()
                        .HasConstraintName("FK_PatientContact_RelationshipType");

                    b.HasOne("Domain.Entities.State", "State")
                        .WithMany("PatientContacts")
                        .HasForeignKey("fk_StateID")
                        .HasConstraintName("FK_PatientContact_State");

                    b.Navigation("ContactType");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Patient");

                    b.Navigation("RelationshipType");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Domain.Entities.PatientDiagnosis", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany("PatientDiagnosesCreatedByUser")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_PatientDiagnosis_User");

                    b.HasOne("Domain.Entities.User", "ModifiedByUser")
                        .WithMany("PatientDiagnosesModifiedByUser")
                        .HasForeignKey("ModifiedBy")
                        .IsRequired()
                        .HasConstraintName("FK_PatientDiagnosis_User1");

                    b.HasOne("Domain.Entities.Diagnosis", "Diagnosis")
                        .WithMany("PatientDiagnoses")
                        .HasForeignKey("fk_DiagnosisID")
                        .IsRequired()
                        .HasConstraintName("FK_PatientDiagnosis_Diagnosis");

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("PatientDiagnoses")
                        .HasForeignKey("fk_PatientID")
                        .IsRequired()
                        .HasConstraintName("FK_PatientDiagnosis_Patient");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Diagnosis");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.PatientPayor", b =>
                {
                    b.HasOne("Domain.Entities.State", "InsuredState")
                        .WithMany("PatientPayors")
                        .HasForeignKey("fk_InsuredStateID")
                        .HasConstraintName("FK_PatientPayor_State");

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("PatientPayors")
                        .HasForeignKey("fk_PatientID")
                        .IsRequired()
                        .HasConstraintName("FK_PatientPayor_Patient");

                    b.HasOne("Domain.Entities.Payor", "Payor")
                        .WithMany("PatientPayors")
                        .HasForeignKey("fk_PayorID")
                        .IsRequired()
                        .HasConstraintName("FK_PatientPayor_Payor");

                    b.HasOne("Domain.Entities.PayorLevel", "PayorLevel")
                        .WithMany("PatientPayors")
                        .HasForeignKey("fk_PayorLevelID")
                        .IsRequired()
                        .HasConstraintName("FK_PatientPayor_PayorLevel");

                    b.HasOne("Domain.Entities.Gender", "PolicyHolderGender")
                        .WithMany("PatientPayors")
                        .HasForeignKey("fk_PolicyHolderGenderID")
                        .HasConstraintName("FK_PatientPayor_Gender");

                    b.Navigation("InsuredState");

                    b.Navigation("Patient");

                    b.Navigation("Payor");

                    b.Navigation("PayorLevel");

                    b.Navigation("PolicyHolderGender");
                });

            modelBuilder.Entity("Domain.Entities.PatientPayorEligibility", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany("PatientPayorEligibilitiesCreatedByUser")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_PatientPayorEligibility_User");

                    b.HasOne("Domain.Entities.PatientPayor", "PatientPayor")
                        .WithMany("PatientPayorEligibilities")
                        .HasForeignKey("Fk_PatientPayorID")
                        .HasConstraintName("FK_PatientPayorEligibility_PatientPayor");

                    b.HasOne("Domain.Entities.User", "ModifiedByUser")
                        .WithMany("PatientPayorEligibilitiesModifiedByUser")
                        .HasForeignKey("ModifiedBy")
                        .IsRequired()
                        .HasConstraintName("FK_PatientPayorEligibility_User1");

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("PatientPayorEligibilities")
                        .HasForeignKey("fk_PatientID")
                        .HasConstraintName("FK_PatientPayorEligibility_Patient");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Patient");

                    b.Navigation("PatientPayor");
                });

            modelBuilder.Entity("Domain.Entities.PatientPayorEligibilityDetail", b =>
                {
                    b.HasOne("Domain.Entities.PatientPayorEligibility", "PatientPayorEligiblity")
                        .WithMany("PatientPayorEligibilityDetails")
                        .HasForeignKey("fk_PatientPayorEligiblityID")
                        .IsRequired()
                        .HasConstraintName("FK_PatientPayorEligibilityDetail_PatientPayorEligibility");

                    b.HasOne("Domain.Entities.State", "State")
                        .WithMany("PatientPayorEligibilityDetails")
                        .HasForeignKey("fk_StateID")
                        .HasConstraintName("FK_PatientPayorEligibilityDetail_State");

                    b.Navigation("PatientPayorEligiblity");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Domain.Entities.PatientProvider", b =>
                {
                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("PatientProviders")
                        .HasForeignKey("fk_PatientID")
                        .IsRequired()
                        .HasConstraintName("FK_PatientProvider_Patient");

                    b.HasOne("Domain.Entities.Provider", "Provider")
                        .WithMany("PatientProviders")
                        .HasForeignKey("fk_ProviderID")
                        .IsRequired()
                        .HasConstraintName("FK_PatientProvider_Provider");

                    b.HasOne("Domain.Entities.ProviderType", "ProviderType")
                        .WithMany("PatientProviders")
                        .HasForeignKey("fk_ProviderTypeID")
                        .IsRequired()
                        .HasConstraintName("FK_PatientProvider_ProviderType");

                    b.Navigation("Patient");

                    b.Navigation("Provider");

                    b.Navigation("ProviderType");
                });

            modelBuilder.Entity("Domain.Entities.Provider", b =>
                {
                    b.HasOne("Domain.Entities.Provider", "ParentProvider")
                        .WithMany("ParentProviders")
                        .HasForeignKey("fk_ParentProviderID")
                        .HasConstraintName("FK_Provider_Provider");

                    b.Navigation("ParentProvider");
                });

            modelBuilder.Entity("Domain.Entities.ProviderAvailability", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany("ProviderAvailbilitiesCreatedByUser")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_ProviderAvailbility_User");

                    b.HasOne("Domain.Entities.User", "ModifiedByUser")
                        .WithMany("ProviderAvailbilitiesModifiedByUser")
                        .HasForeignKey("ModifiedBy")
                        .IsRequired()
                        .HasConstraintName("FK_ProviderAvailbility_User1");

                    b.HasOne("Domain.Entities.Provider", "Provider")
                        .WithMany("ProviderAvailbilities")
                        .HasForeignKey("fk_ProviderID")
                        .IsRequired()
                        .HasConstraintName("FK_ProviderAvailbility_Provider");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Domain.Entities.ProviderUnavailability", b =>
                {
                    b.HasOne("Domain.Entities.Provider", "Provider")
                        .WithMany("ProviderUnavailbilities")
                        .HasForeignKey("fk_ProviderID")
                        .IsRequired()
                        .HasConstraintName("FK_ProviderUnavailbility_Provider");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Domain.Entities.UserToRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("UserToRoles")
                        .HasForeignKey("fk_RoleID")
                        .IsRequired()
                        .HasConstraintName("FK_UserToRole_Role");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserToRoles")
                        .HasForeignKey("fk_UserID")
                        .IsRequired()
                        .HasConstraintName("FK_UserToRole_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserWorkflowStep", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserWorkflowSteps")
                        .HasForeignKey("fk_UserID")
                        .IsRequired()
                        .HasConstraintName("FK_UserWorkflowStep_User");

                    b.HasOne("Domain.Entities.WorkflowStep", "WorkflowStep")
                        .WithMany("UserWorkflowSteps")
                        .HasForeignKey("fk_WorkflowStepID")
                        .IsRequired()
                        .HasConstraintName("FK_UserWorkflowStep_WorkflowStep");

                    b.Navigation("User");

                    b.Navigation("WorkflowStep");
                });

            modelBuilder.Entity("Domain.Entities.WorkflowRecord", b =>
                {
                    b.HasOne("Domain.Entities.User", "EnterStepUser")
                        .WithMany("WorkflowRecords")
                        .HasForeignKey("EnterStepUserID")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowRecord_User");

                    b.HasOne("Domain.Entities.Lead", "Lead")
                        .WithMany("WorkflowRecords")
                        .HasForeignKey("fk_LeadID")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowRecord_Lead");

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("WorkflowRecords")
                        .HasForeignKey("fk_PatientID")
                        .HasConstraintName("FK_WorkflowRecord_Patient");

                    b.HasOne("Domain.Entities.Workflow", "Workflow")
                        .WithMany("WorkflowRecords")
                        .HasForeignKey("fk_WorkflowID")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowRecord_Workflow");

                    b.HasOne("Domain.Entities.WorkflowStep", "WorkflowStep")
                        .WithMany("WorkflowRecords")
                        .HasForeignKey("fk_WorkflowStepID")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowRecord_WorkflowStep");

                    b.Navigation("EnterStepUser");

                    b.Navigation("Lead");

                    b.Navigation("Patient");

                    b.Navigation("Workflow");

                    b.Navigation("WorkflowStep");
                });

            modelBuilder.Entity("Domain.Entities.WorkflowRecordNote", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("WorkflowRecordNotes")
                        .HasForeignKey("fk_UserID")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowRecordNote_User");

                    b.HasOne("Domain.Entities.WorkflowRecord", "WorkflowRecord")
                        .WithMany("WorkflowRecordNotes")
                        .HasForeignKey("fk_WorkflowRecordID")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowRecordNote_WorkflowRecord");

                    b.HasOne("Domain.Entities.WorkflowStep", "WorkflowStep")
                        .WithMany("WorkflowRecordNotes")
                        .HasForeignKey("fk_WorkflowStepID")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowRecordNote_WorkflowStep");

                    b.Navigation("User");

                    b.Navigation("WorkflowRecord");

                    b.Navigation("WorkflowStep");
                });

            modelBuilder.Entity("Domain.Entities.WorkflowRecordStateHistory", b =>
                {
                    b.HasOne("Domain.Entities.User", "EnteredStateByUser")
                        .WithMany("WorkflowRecordStateHistories")
                        .HasForeignKey("EnteredStateByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowRecordStateHistory_User");

                    b.HasOne("Domain.Entities.WorkflowRecord", "WorkflowRecord")
                        .WithMany("WorkflowRecordStateHistories")
                        .HasForeignKey("fk_WorkflowRecordID")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowRecordStateHistory_WorkflowRecord");

                    b.HasOne("Domain.Entities.WorkflowState", "WorkflowState")
                        .WithMany("WorkflowRecordStateHistories")
                        .HasForeignKey("fk_WorkflowStateID")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowRecordStateHistory_WorkflowState");

                    b.Navigation("EnteredStateByUser");

                    b.Navigation("WorkflowRecord");

                    b.Navigation("WorkflowState");
                });

            modelBuilder.Entity("Domain.Entities.WorkflowRecordUserLock", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("WorkflowRecordUserLocks")
                        .HasForeignKey("fk_UserID")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowRecordUserLock_User");

                    b.HasOne("Domain.Entities.WorkflowRecord", "WorkflowRecord")
                        .WithMany("WorkflowRecordUserLocks")
                        .HasForeignKey("fk_WorkflowRecordID")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowRecordUserLock_WorkflowRecord");

                    b.Navigation("User");

                    b.Navigation("WorkflowRecord");
                });

            modelBuilder.Entity("Domain.Entities.WorkflowStep", b =>
                {
                    b.HasOne("Domain.Entities.WorkflowStep", "RegressToStep")
                        .WithMany("InverseRegressToStep")
                        .HasForeignKey("RegressToStepID")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowStep_WorkflowStep");

                    b.HasOne("Domain.Entities.Workflow", "Workflow")
                        .WithMany("WorkflowSteps")
                        .HasForeignKey("fk_WorkflowID")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowStep_Workflow");

                    b.Navigation("RegressToStep");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Domain.Entities.WorkflowStepHistory", b =>
                {
                    b.HasOne("Domain.Entities.User", "EnterStepUser")
                        .WithMany("WorkflowStepHistoryEnterStepUsers")
                        .HasForeignKey("EnterStepUserID")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowStepHistory_User");

                    b.HasOne("Domain.Entities.User", "ExitStepUser")
                        .WithMany("WorkflowStepHistoryExitStepUsers")
                        .HasForeignKey("ExitStepUserID")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowStepHistory_User1");

                    b.HasOne("Domain.Entities.WorkflowRecord", "WorkflowRecord")
                        .WithMany("WorkflowStepHistories")
                        .HasForeignKey("fk_WorkflowRecordID")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowStepHistory_WorkflowRecord");

                    b.HasOne("Domain.Entities.WorkflowStep", "WorkflowStep")
                        .WithMany("WorkflowStepHistories")
                        .HasForeignKey("fk_WorkflowStepID")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowStepHistory_WorkflowStep");

                    b.Navigation("EnterStepUser");

                    b.Navigation("ExitStepUser");

                    b.Navigation("WorkflowRecord");

                    b.Navigation("WorkflowStep");
                });

            modelBuilder.Entity("Domain.Entities.Activity", b =>
                {
                    b.Navigation("ActivityEmails");

                    b.Navigation("ActivityMessages");

                    b.Navigation("ActivityNotes");

                    b.Navigation("ActivityPhoneCalls");

                    b.Navigation("ActivityTasks");
                });

            modelBuilder.Entity("Domain.Entities.ActivityDirection", b =>
                {
                    b.Navigation("ActivityMessages");

                    b.Navigation("ActivityPhoneCalls");
                });

            modelBuilder.Entity("Domain.Entities.ActivityStatus", b =>
                {
                    b.Navigation("ActivityTasks");
                });

            modelBuilder.Entity("Domain.Entities.ActivityType", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("Domain.Entities.AddressType", b =>
                {
                    b.Navigation("PatientAddresses");
                });

            modelBuilder.Entity("Domain.Entities.Branch", b =>
                {
                    b.Navigation("Leads");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Domain.Entities.ContactMethod", b =>
                {
                    b.Navigation("LeadContacts");
                });

            modelBuilder.Entity("Domain.Entities.ContactType", b =>
                {
                    b.Navigation("PatientContacts");
                });

            modelBuilder.Entity("Domain.Entities.Diagnosis", b =>
                {
                    b.Navigation("PatientDiagnoses");
                });

            modelBuilder.Entity("Domain.Entities.Entity", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Domain.Entities.Gender", b =>
                {
                    b.Navigation("Leads");

                    b.Navigation("PatientPayors");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Domain.Entities.ICDCodeType", b =>
                {
                    b.Navigation("Diagnoses");
                });

            modelBuilder.Entity("Domain.Entities.Lead", b =>
                {
                    b.Navigation("LeadContacts");

                    b.Navigation("WorkflowRecords");
                });

            modelBuilder.Entity("Domain.Entities.LeadSource", b =>
                {
                    b.Navigation("Leads");
                });

            modelBuilder.Entity("Domain.Entities.LeadType", b =>
                {
                    b.Navigation("Leads");
                });

            modelBuilder.Entity("Domain.Entities.MaritalStatus", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Appointments");

                    b.Navigation("Leads");

                    b.Navigation("LinkedPatients");

                    b.Navigation("PatientAddresses");

                    b.Navigation("PatientContacts");

                    b.Navigation("PatientDiagnoses");

                    b.Navigation("PatientPayorEligibilities");

                    b.Navigation("PatientPayors");

                    b.Navigation("PatientProviders");

                    b.Navigation("WorkflowRecords");
                });

            modelBuilder.Entity("Domain.Entities.PatientPayor", b =>
                {
                    b.Navigation("PatientPayorEligibilities");
                });

            modelBuilder.Entity("Domain.Entities.PatientPayorEligibility", b =>
                {
                    b.Navigation("PatientPayorEligibilityDetails");
                });

            modelBuilder.Entity("Domain.Entities.Payor", b =>
                {
                    b.Navigation("PatientPayors");
                });

            modelBuilder.Entity("Domain.Entities.PayorLevel", b =>
                {
                    b.Navigation("PatientPayors");
                });

            modelBuilder.Entity("Domain.Entities.Provider", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ParentProviders");

                    b.Navigation("PatientProviders");

                    b.Navigation("ProviderAvailbilities");

                    b.Navigation("ProviderUnavailbilities");
                });

            modelBuilder.Entity("Domain.Entities.ProviderType", b =>
                {
                    b.Navigation("PatientProviders");
                });

            modelBuilder.Entity("Domain.Entities.RelationshipType", b =>
                {
                    b.Navigation("PatientContacts");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("UserToRoles");
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Leads");

                    b.Navigation("PatientAddresses");

                    b.Navigation("PatientContacts");

                    b.Navigation("PatientPayorEligibilityDetails");

                    b.Navigation("PatientPayors");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("ActivitiesCreatedByUser");

                    b.Navigation("ActivitiesModifiedByUser");

                    b.Navigation("AppointmentsCreatedByUser");

                    b.Navigation("AppointmentsModifiedByUser");

                    b.Navigation("BranchesCreatedByUser");

                    b.Navigation("BranchesModifiedByUser");

                    b.Navigation("Files");

                    b.Navigation("PatientContactsCreatedByUser");

                    b.Navigation("PatientContactsModifiedByUser");

                    b.Navigation("PatientDiagnosesCreatedByUser");

                    b.Navigation("PatientDiagnosesModifiedByUser");

                    b.Navigation("PatientPayorEligibilitiesCreatedByUser");

                    b.Navigation("PatientPayorEligibilitiesModifiedByUser");

                    b.Navigation("PatientsCreatedByUser");

                    b.Navigation("PatientsModifiedByUser");

                    b.Navigation("ProviderAvailbilitiesCreatedByUser");

                    b.Navigation("ProviderAvailbilitiesModifiedByUser");

                    b.Navigation("UserToRoles");

                    b.Navigation("UserWorkflowSteps");

                    b.Navigation("WorkflowRecordNotes");

                    b.Navigation("WorkflowRecordStateHistories");

                    b.Navigation("WorkflowRecordUserLocks");

                    b.Navigation("WorkflowRecords");

                    b.Navigation("WorkflowStepHistoryEnterStepUsers");

                    b.Navigation("WorkflowStepHistoryExitStepUsers");
                });

            modelBuilder.Entity("Domain.Entities.Workflow", b =>
                {
                    b.Navigation("WorkflowRecords");

                    b.Navigation("WorkflowSteps");
                });

            modelBuilder.Entity("Domain.Entities.WorkflowRecord", b =>
                {
                    b.Navigation("WorkflowRecordNotes");

                    b.Navigation("WorkflowRecordStateHistories");

                    b.Navigation("WorkflowRecordUserLocks");

                    b.Navigation("WorkflowStepHistories");
                });

            modelBuilder.Entity("Domain.Entities.WorkflowState", b =>
                {
                    b.Navigation("WorkflowRecordStateHistories");
                });

            modelBuilder.Entity("Domain.Entities.WorkflowStep", b =>
                {
                    b.Navigation("InverseRegressToStep");

                    b.Navigation("UserWorkflowSteps");

                    b.Navigation("WorkflowRecordNotes");

                    b.Navigation("WorkflowRecords");

                    b.Navigation("WorkflowStepHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
